// Pipeline meta-information
manifest {
  name = 'CIEVaD'
  description = 'A workflow for a simple, streamlined and rapid evaluation of variant callsets ' 
  author = 'Thomas Krannich'
  nextflowVersion = '>=20.04.0'
  version = new File('./VERSION').text.trim()
}

// Parameters that are accessible in the pipeline script
params {
    // General parameters
    n           = 3
    reference   = 'reference/Sars-Cov-2/Wuhan-Hu-1/MN908947.3.fasta'
    read_type   = 'ont'
    help        = false
    seed        = 479
    outdir      = 'results'
    max_cores   = 8

    // NGS (WGS) - Read simulation parameters
    nb_frag                 = 3000
    fragment_min_size       = 450
    fragment_max_size       = 550
    fragment_mean_size      = 500
    fragment_size_std_dev   = 20
    illumina_read_length    = 150

    // [LEGACY] Nanosim Oxford Nanopore (WGS) - Read simulation parameters
    dna_type        = 'linear'
    model_prefix    = 'aux/nanosim_model/human_giab_hg002_sub1M_kitv14_dorado/hg002_nanosim_sub1M'
    model_caller    = 'guppy'
    median_length   = 5000
    sd_length       = 1.05
    nb_reads        = 10000

    // PBSIM Oxford Nanopore (WGS) - Read simulation parameters
    pbsim_method      = 'qshmm'
    pbsim_model       = 'aux/pbsim_model/QSHMM-ONT-HQ.model'
    pbsim_depth       = 500
    pbsim_strategy    = 'wgs'
    pbsim_length_max  = 700
    pbsim_length_min  = 400

    // Evaluation parameters
    callsets_dir = ''
    sample_sheet = ''
}

// Enable execution report
def trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
report {
    enabled = true
    file    = "${params.outdir}/execution_report_${trace_timestamp}.html"
}

// Predefined configurations for the user. Can be selected using the -profile command line option.
// Profiles can be combined by separating the profile names with a comma.
profiles {
    // engines
    conda { 
        conda.enabled  = true
        conda.useMamba = false
    }
    mamba { 
        conda.enabled  = true
        conda.useMamba = true
    }

    // executors
    local {
        executor.name = "local"
        executor.cpus = params.max_cores
    }

    slurm {
        executor.name = "slurm"
        executor.cpus = params.max_cores
    }
}
